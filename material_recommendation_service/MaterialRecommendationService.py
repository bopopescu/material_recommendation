# -*- coding:utf-8 -*-
#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from __future__ import absolute_import
from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from material_recommendation_service.ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from rpc_thrift.cython.cybinary_protocol import TCyBinaryProtocol
except:
  TCyBinaryProtocol = None


class Iface:
  def article_recommend(self, input_arg):
    """
    Parameters:
     - input_arg
    """
    pass

  def recommend_topn_topic(self, input_arg):
    """
    Parameters:
     - input_arg
    """
    pass

  def recommend_tags(self, input_arg):
    """
    Parameters:
     - input_arg
    """
    pass

  def recommend_list(self, input_arg):
    """
    Parameters:
     - input_arg
    """
    pass

  def recommend_plan(self, input_arg):
    """
    Parameters:
     - input_arg
    """
    pass

  def recommend_news(self, input_arg):
    """
    Parameters:
     - input_arg
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def article_recommend(self, input_arg):
    """
    Parameters:
     - input_arg
    """
    self.send_article_recommend(input_arg)
    return self.recv_article_recommend()

  def send_article_recommend(self, input_arg):
    self._oprot.writeMessageBegin('article_recommend', TMessageType.CALL, self._seqid)
    args = article_recommend_args()
    args.input_arg = input_arg
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_article_recommend(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = article_recommend_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.re is not None:
      raise result.re
    raise TApplicationException(TApplicationException.MISSING_RESULT, "article_recommend failed: unknown result")

  def recommend_topn_topic(self, input_arg):
    """
    Parameters:
     - input_arg
    """
    self.send_recommend_topn_topic(input_arg)
    return self.recv_recommend_topn_topic()

  def send_recommend_topn_topic(self, input_arg):
    self._oprot.writeMessageBegin('recommend_topn_topic', TMessageType.CALL, self._seqid)
    args = recommend_topn_topic_args()
    args.input_arg = input_arg
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_recommend_topn_topic(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = recommend_topn_topic_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.re is not None:
      raise result.re
    raise TApplicationException(TApplicationException.MISSING_RESULT, "recommend_topn_topic failed: unknown result")

  def recommend_tags(self, input_arg):
    """
    Parameters:
     - input_arg
    """
    self.send_recommend_tags(input_arg)
    return self.recv_recommend_tags()

  def send_recommend_tags(self, input_arg):
    self._oprot.writeMessageBegin('recommend_tags', TMessageType.CALL, self._seqid)
    args = recommend_tags_args()
    args.input_arg = input_arg
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_recommend_tags(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = recommend_tags_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.re is not None:
      raise result.re
    raise TApplicationException(TApplicationException.MISSING_RESULT, "recommend_tags failed: unknown result")

  def recommend_list(self, input_arg):
    """
    Parameters:
     - input_arg
    """
    self.send_recommend_list(input_arg)
    return self.recv_recommend_list()

  def send_recommend_list(self, input_arg):
    self._oprot.writeMessageBegin('recommend_list', TMessageType.CALL, self._seqid)
    args = recommend_list_args()
    args.input_arg = input_arg
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_recommend_list(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = recommend_list_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.re is not None:
      raise result.re
    raise TApplicationException(TApplicationException.MISSING_RESULT, "recommend_list failed: unknown result")

  def recommend_plan(self, input_arg):
    """
    Parameters:
     - input_arg
    """
    self.send_recommend_plan(input_arg)
    return self.recv_recommend_plan()

  def send_recommend_plan(self, input_arg):
    self._oprot.writeMessageBegin('recommend_plan', TMessageType.CALL, self._seqid)
    args = recommend_plan_args()
    args.input_arg = input_arg
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_recommend_plan(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = recommend_plan_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.re is not None:
      raise result.re
    raise TApplicationException(TApplicationException.MISSING_RESULT, "recommend_plan failed: unknown result")

  def recommend_news(self, input_arg):
    """
    Parameters:
     - input_arg
    """
    self.send_recommend_news(input_arg)
    return self.recv_recommend_news()

  def send_recommend_news(self, input_arg):
    self._oprot.writeMessageBegin('recommend_news', TMessageType.CALL, self._seqid)
    args = recommend_news_args()
    args.input_arg = input_arg
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_recommend_news(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = recommend_news_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.re is not None:
      raise result.re
    raise TApplicationException(TApplicationException.MISSING_RESULT, "recommend_news failed: unknown result")


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["article_recommend"] = Processor.process_article_recommend
    self._processMap["recommend_topn_topic"] = Processor.process_recommend_topn_topic
    self._processMap["recommend_tags"] = Processor.process_recommend_tags
    self._processMap["recommend_list"] = Processor.process_recommend_list
    self._processMap["recommend_plan"] = Processor.process_recommend_plan
    self._processMap["recommend_news"] = Processor.process_recommend_news

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_article_recommend(self, seqid, iprot, oprot):
    args = article_recommend_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = article_recommend_result()
    try:
      result.success = self._handler.article_recommend(args.input_arg)
    except RpcException as re:
      result.re = re
    oprot.writeMessageBegin("article_recommend", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_recommend_topn_topic(self, seqid, iprot, oprot):
    args = recommend_topn_topic_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = recommend_topn_topic_result()
    try:
      result.success = self._handler.recommend_topn_topic(args.input_arg)
    except RpcException as re:
      result.re = re
    oprot.writeMessageBegin("recommend_topn_topic", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_recommend_tags(self, seqid, iprot, oprot):
    args = recommend_tags_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = recommend_tags_result()
    try:
      result.success = self._handler.recommend_tags(args.input_arg)
    except RpcException as re:
      result.re = re
    oprot.writeMessageBegin("recommend_tags", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_recommend_list(self, seqid, iprot, oprot):
    args = recommend_list_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = recommend_list_result()
    try:
      result.success = self._handler.recommend_list(args.input_arg)
    except RpcException as re:
      result.re = re
    oprot.writeMessageBegin("recommend_list", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_recommend_plan(self, seqid, iprot, oprot):
    args = recommend_plan_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = recommend_plan_result()
    try:
      result.success = self._handler.recommend_plan(args.input_arg)
    except RpcException as re:
      result.re = re
    oprot.writeMessageBegin("recommend_plan", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_recommend_news(self, seqid, iprot, oprot):
    args = recommend_news_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = recommend_news_result()
    try:
      result.success = self._handler.recommend_news(args.input_arg)
    except RpcException as re:
      result.re = re
    oprot.writeMessageBegin("recommend_news", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class article_recommend_args:
  """
  Attributes:
   - input_arg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'input_arg', None, None, ), # 1
  )

  def __init__(self, input_arg=None,):
    self.input_arg = input_arg

  def read(self, iprot):
    if iprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      iprot.read_struct(self)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.input_arg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      oprot.write_struct(self)
      return
    oprot.writeStructBegin('article_recommend_args')
    if self.input_arg is not None:
      oprot.writeFieldBegin('input_arg', TType.STRING, 1)
      oprot.writeString(self.input_arg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.input_arg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class article_recommend_result:
  """
  Attributes:
   - success
   - re
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 're', (RpcException, RpcException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, re=None,):
    self.success = success
    self.re = re

  def read(self, iprot):
    if iprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      iprot.read_struct(self)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.re = RpcException()
          self.re.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      oprot.write_struct(self)
      return
    oprot.writeStructBegin('article_recommend_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.re is not None:
      oprot.writeFieldBegin('re', TType.STRUCT, 1)
      self.re.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.re)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class recommend_topn_topic_args:
  """
  Attributes:
   - input_arg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'input_arg', None, None, ), # 1
  )

  def __init__(self, input_arg=None,):
    self.input_arg = input_arg

  def read(self, iprot):
    if iprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      iprot.read_struct(self)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.input_arg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      oprot.write_struct(self)
      return
    oprot.writeStructBegin('recommend_topn_topic_args')
    if self.input_arg is not None:
      oprot.writeFieldBegin('input_arg', TType.STRING, 1)
      oprot.writeString(self.input_arg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.input_arg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class recommend_topn_topic_result:
  """
  Attributes:
   - success
   - re
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 're', (RpcException, RpcException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, re=None,):
    self.success = success
    self.re = re

  def read(self, iprot):
    if iprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      iprot.read_struct(self)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.re = RpcException()
          self.re.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      oprot.write_struct(self)
      return
    oprot.writeStructBegin('recommend_topn_topic_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.re is not None:
      oprot.writeFieldBegin('re', TType.STRUCT, 1)
      self.re.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.re)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class recommend_tags_args:
  """
  Attributes:
   - input_arg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'input_arg', None, None, ), # 1
  )

  def __init__(self, input_arg=None,):
    self.input_arg = input_arg

  def read(self, iprot):
    if iprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      iprot.read_struct(self)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.input_arg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      oprot.write_struct(self)
      return
    oprot.writeStructBegin('recommend_tags_args')
    if self.input_arg is not None:
      oprot.writeFieldBegin('input_arg', TType.STRING, 1)
      oprot.writeString(self.input_arg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.input_arg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class recommend_tags_result:
  """
  Attributes:
   - success
   - re
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 're', (RpcException, RpcException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, re=None,):
    self.success = success
    self.re = re

  def read(self, iprot):
    if iprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      iprot.read_struct(self)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.re = RpcException()
          self.re.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      oprot.write_struct(self)
      return
    oprot.writeStructBegin('recommend_tags_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.re is not None:
      oprot.writeFieldBegin('re', TType.STRUCT, 1)
      self.re.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.re)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class recommend_list_args:
  """
  Attributes:
   - input_arg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'input_arg', None, None, ), # 1
  )

  def __init__(self, input_arg=None,):
    self.input_arg = input_arg

  def read(self, iprot):
    if iprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      iprot.read_struct(self)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.input_arg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      oprot.write_struct(self)
      return
    oprot.writeStructBegin('recommend_list_args')
    if self.input_arg is not None:
      oprot.writeFieldBegin('input_arg', TType.STRING, 1)
      oprot.writeString(self.input_arg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.input_arg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class recommend_list_result:
  """
  Attributes:
   - success
   - re
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 're', (RpcException, RpcException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, re=None,):
    self.success = success
    self.re = re

  def read(self, iprot):
    if iprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      iprot.read_struct(self)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.re = RpcException()
          self.re.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      oprot.write_struct(self)
      return
    oprot.writeStructBegin('recommend_list_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.re is not None:
      oprot.writeFieldBegin('re', TType.STRUCT, 1)
      self.re.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.re)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class recommend_plan_args:
  """
  Attributes:
   - input_arg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'input_arg', None, None, ), # 1
  )

  def __init__(self, input_arg=None,):
    self.input_arg = input_arg

  def read(self, iprot):
    if iprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      iprot.read_struct(self)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.input_arg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      oprot.write_struct(self)
      return
    oprot.writeStructBegin('recommend_plan_args')
    if self.input_arg is not None:
      oprot.writeFieldBegin('input_arg', TType.STRING, 1)
      oprot.writeString(self.input_arg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.input_arg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class recommend_plan_result:
  """
  Attributes:
   - success
   - re
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 're', (RpcException, RpcException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, re=None,):
    self.success = success
    self.re = re

  def read(self, iprot):
    if iprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      iprot.read_struct(self)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.re = RpcException()
          self.re.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      oprot.write_struct(self)
      return
    oprot.writeStructBegin('recommend_plan_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.re is not None:
      oprot.writeFieldBegin('re', TType.STRUCT, 1)
      self.re.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.re)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class recommend_news_args:
  """
  Attributes:
   - input_arg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'input_arg', None, None, ), # 1
  )

  def __init__(self, input_arg=None,):
    self.input_arg = input_arg

  def read(self, iprot):
    if iprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      iprot.read_struct(self)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.input_arg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      oprot.write_struct(self)
      return
    oprot.writeStructBegin('recommend_news_args')
    if self.input_arg is not None:
      oprot.writeFieldBegin('input_arg', TType.STRING, 1)
      oprot.writeString(self.input_arg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.input_arg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class recommend_news_result:
  """
  Attributes:
   - success
   - re
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 're', (RpcException, RpcException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, re=None,):
    self.success = success
    self.re = re

  def read(self, iprot):
    if iprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      iprot.read_struct(self)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.re = RpcException()
          self.re.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TCyBinaryProtocol and self.thrift_spec is not None:
      oprot.write_struct(self)
      return
    oprot.writeStructBegin('recommend_news_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.re is not None:
      oprot.writeFieldBegin('re', TType.STRUCT, 1)
      self.re.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.re)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
